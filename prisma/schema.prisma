// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  telegramId String   @unique
  username   String?
  firstName  String?
  lastName   String?
  isPremium  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  projects      Project[]
  clients       Client[]
  tasks         Task[]
  payments      Payment[]
  reminders     Reminder[]
  telegramChats TelegramChat[]
  timeSessions  TimeSession[]

  @@map("users")
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TaskSource {
  MANUAL
  TELEGRAM
  AI_GENERATED
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(ACTIVE)
  budget      Decimal?
  currency    String        @default("RUB")
  startDate   DateTime?    
  deadline    DateTime?
  endDate     DateTime?    
  priority    Priority      @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  tasks     Task[]
  payments  Payment[]
  reminders Reminder[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([clientId])
  @@index([deadline])
  @@map("projects")
}

model Task {
  id                 String     @id @default(cuid())
  title              String
  description        String?
  status             TaskStatus @default(TODO)
  priority           Priority   @default(MEDIUM)
  estimatedHours     Float?
  actualHours        Float?
  deadline           DateTime?
  dueDate            DateTime?
  source             TaskSource @default(MANUAL)
  telegramChatId     String?
  telegramMessageId  String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  parentTaskId String?
  parentTask   Task?   @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks     Task[]  @relation("TaskHierarchy")

  reminders    Reminder[]
  timeSessions TimeSession[]

  @@index([userId, status])
  @@index([projectId])
  @@index([userId, deadline])
  @@index([parentTaskId])
  @@index([userId, createdAt])
  @@map("tasks")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projects Project[]

  @@index([userId])
  @@index([email])
  @@map("clients")
}

model Payment {
  id          String        @id @default(cuid())
  amount      Decimal
  currency    String        @default("RUB")
  status      PaymentStatus @default(PENDING)
  description String?
  dueDate     DateTime?
  paidDate    DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([userId, status])
  @@index([projectId])
  @@index([userId, dueDate])
  @@index([status, dueDate])
  @@map("payments")
}

model Reminder {
  id          String   @id @default(cuid())
  title       String
  message     String
  scheduledAt DateTime
  sent        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@index([userId, scheduledAt])
  @@index([sent, scheduledAt])
  @@map("reminders")
}

model TelegramChat {
  id        String   @id @default(cuid())
  chatId    String   @unique
  title     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("telegram_chats")
}

model TimeSession {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  duration  Float    // Duration in seconds
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId, taskId])
  @@index([taskId, startTime])
  @@map("time_sessions")
}
