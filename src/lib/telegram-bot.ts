import { Bot, Context, session, SessionFlavor } from 'grammy';
import { PrismaClient } from '@prisma/client';
import { HttpError, GrammyError } from 'grammy';

const prisma = new PrismaClient();

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

type MyContext = Context & SessionFlavor<Record<string, unknown>>;

export const bot = new Bot<MyContext>(process.env.TELEGRAM_BOT_TOKEN);

// Session middleware for storing user state
bot.use(session({
  initial: () => ({}),
}));

// OpenRouter API integration for AI message analysis
async function analyzeMessageWithAI(text: string) {
  if (!process.env.OPENROUTER_API_KEY) {
    return null;
  }

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'anthropic/claude-3-haiku',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö. 
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)
            - description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            - priority: LOW/MEDIUM/HIGH
            - dueDate: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞)
            - projectName: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
            - clientName: –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
            - category: —Ç–∏–ø –∑–∞–¥–∞—á–∏ (development, design, meeting, bug, feature, etc.)
            - estimatedHours: –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö (–µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
            
            –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`
          },
          {
            role: 'user',
            content: text
          }
        ],
        max_tokens: 500,
        temperature: 0.3
      })
    });

    if (!response.ok) {
      throw new Error(`OpenRouter API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (content) {
      return JSON.parse(content);
    }
  } catch (error) {
    console.error('AI analysis error:', error);
  }
  
  return null;
}

// Helper function to parse hashtags from message
function parseHashtags(text: string) {
  const hashtags = text.match(/#\w+/g) || [];
  return hashtags.map(tag => tag.substring(1).toLowerCase());
}

// Enhanced task parsing with AI assistance
async function parseTaskFromMessage(text: string, hashtags: string[]) {
  const taskData: {
    title?: string;
    description?: string;
    priority?: 'LOW' | 'MEDIUM' | 'HIGH';
    dueDate?: Date;
    projectName?: string;
    clientName?: string;
    category?: string;
    estimatedHours?: number;
  } = {};

  // Try AI analysis first
  const aiAnalysis = await analyzeMessageWithAI(text);
  if (aiAnalysis) {
    taskData.title = aiAnalysis.title;
    taskData.description = aiAnalysis.description;
    taskData.priority = aiAnalysis.priority;
    taskData.projectName = aiAnalysis.projectName;
    taskData.clientName = aiAnalysis.clientName;
    taskData.category = aiAnalysis.category;
    taskData.estimatedHours = aiAnalysis.estimatedHours;
    
    if (aiAnalysis.dueDate) {
      taskData.dueDate = new Date(aiAnalysis.dueDate);
    }
  } else {
    // Fallback to manual parsing
    const lines = text.split('\n').filter(line => !line.startsWith('#'));
    if (lines.length > 0) {
      taskData.title = lines[0].trim();
      if (lines.length > 1) {
        taskData.description = lines.slice(1).join('\n').trim();
      }
    }

    // Parse priority from hashtags
    if (hashtags.includes('–≤—ã—Å–æ–∫–∏–π') || hashtags.includes('urgent') || hashtags.includes('—Å—Ä–æ—á–Ω–æ')) {
      taskData.priority = 'HIGH';
    } else if (hashtags.includes('—Å—Ä–µ–¥–Ω–∏–π') || hashtags.includes('medium')) {
      taskData.priority = 'MEDIUM';
    } else {
      taskData.priority = 'LOW';
    }

    // Parse due date from text
    const dateRegex = /(\d{1,2})[\.\/\-](\d{1,2})[\.\/\-](\d{2,4})/;
    const dateMatch = text.match(dateRegex);
    if (dateMatch) {
      const [, day, month, year] = dateMatch;
      const fullYear = year.length === 2 ? 2000 + parseInt(year) : parseInt(year);
      taskData.dueDate = new Date(fullYear, parseInt(month) - 1, parseInt(day));
    }

    // Extract client name from hashtags
    const clientTag = hashtags.find(tag => tag.startsWith('–∫–ª–∏–µ–Ω—Ç'));
    if (clientTag) {
      taskData.clientName = clientTag.replace('–∫–ª–∏–µ–Ω—Ç', '').trim();
    }

    // Extract project name from hashtags
    const projectTag = hashtags.find(tag => tag.startsWith('–ø—Ä–æ–µ–∫—Ç'));
    if (projectTag) {
      taskData.projectName = projectTag.replace('–ø—Ä–æ–µ–∫—Ç', '').trim();
    }
  }

  return taskData;
}

// Helper function to find or create project and client
async function findOrCreateProjectAndClient(userId: string, taskData: {
  title?: string;
  description?: string;
  priority?: 'LOW' | 'MEDIUM' | 'HIGH';
  dueDate?: Date;
  projectName?: string;
  clientName?: string;
  category?: string;
  estimatedHours?: number;
}) {
  let projectId = null;
  let clientId = null;

  // Find or create client
  if (taskData.clientName) {
    let client = await prisma.client.findFirst({
      where: {
        userId,
        name: taskData.clientName as string
      }
    });

    if (!client) {
      client = await prisma.client.create({
        data: {
          name: taskData.clientName as string,
          userId,
        }
      });
    }
    clientId = client.id;
  }

  // Find or create project
  if (taskData.projectName) {
    let project = await prisma.project.findFirst({
      where: {
        userId,
        title: taskData.projectName as string
      }
    });

    if (!project) {
      project = await prisma.project.create({
        data: {
          title: taskData.projectName as string,
          description: `–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram`,
          status: 'ACTIVE',
          userId,
          clientId,
        }
      });
    }
    projectId = project.id;
  } else if (clientId) {
    // Try to find active project for the client
    const project = await prisma.project.findFirst({
      where: {
        userId,
        clientId,
        status: 'ACTIVE'
      }
    });
    if (project) {
      projectId = project.id;
    }
  }

  return { projectId, clientId };
}

// Helper function to create task from Telegram message
async function createTaskFromTelegram(
  chatId: number,
  messageId: number,
  userId: string,
  taskData: {
    title?: string;
    description?: string;
    priority?: 'LOW' | 'MEDIUM' | 'HIGH';
    dueDate?: Date;
    projectName?: string;
    clientName?: string;
    category?: string;
    estimatedHours?: number;
  }
) {
  try {
    // Find or create project and client
    const { projectId } = await findOrCreateProjectAndClient(userId, taskData);

    // Create the task
    const task = await prisma.task.create({
      data: {
        title: taskData.title || '–ó–∞–¥–∞—á–∞ –∏–∑ Telegram',
        description: taskData.description,
        priority: taskData.priority || 'MEDIUM',
        status: 'TODO',
        dueDate: taskData.dueDate,
        projectId,
        userId,
        source: 'TELEGRAM',
        telegramChatId: chatId.toString(),
        telegramMessageId: messageId.toString(),
      },
      include: {
        project: {
          include: {
            client: true
          }
        }
      }
    });

    return task;
  } catch (error) {
    console.error('Error creating task from Telegram:', error);
    throw error;
  }
}

// Start command
bot.command('start', async (ctx) => {
  const welcomeMessage = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Raising CRM Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò.

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
‚Ä¢ –ü—Ä–∏–≤—è–∂–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∫–ª–∏–µ–Ω—Ç–∞–º

ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –î–∞—Ç—ã –∏ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –û—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏

üè∑Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏:
‚Ä¢ #—Å—Ä–æ—á–Ω–æ, #–≤—ã—Å–æ–∫–∏–π - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ #—Å—Ä–µ–¥–Ω–∏–π - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç  
‚Ä¢ #–∫–ª–∏–µ–Ω—Ç[–∏–º—è] - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ #–ø—Ä–æ–µ–∫—Ç[–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
  `;
  
  await ctx.reply(welcomeMessage);
});

// Help command
bot.command('help', async (ctx) => {
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Raising CRM Bot

üîß –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏. –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –ò–∑–≤–ª–µ—á–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –ù–∞–π–¥–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤/–ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–∞—Ç—ã –∏ —Å—Ä–æ–∫–∏
‚Ä¢ –û—Ü–µ–Ω–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

ü§ñ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
"–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ —Ñ–æ—Ä–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ü–µ—Ç—Ä–æ–≤ –¥–æ 25 –¥–µ–∫–∞–±—Ä—è"

"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"

"–°—Ä–æ—á–Ω–æ: –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ –ø—è—Ç–Ω–∏—Ü—ã"

üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
#—Å—Ä–æ—á–Ω–æ #–≤—ã—Å–æ–∫–∏–π #urgent - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
#—Å—Ä–µ–¥–Ω–∏–π #medium - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
#–∫–ª–∏–µ–Ω—Ç–ò–≤–∞–Ω–æ–≤ - –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "–ò–≤–∞–Ω–æ–≤"
#–ø—Ä–æ–µ–∫—Ç–°–∞–π—Ç - –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–°–∞–π—Ç"
  `;
  
  await ctx.reply(helpMessage);
});

// Status command
bot.command('status', async (ctx) => {
  const aiStatus = process.env.OPENROUTER_API_KEY ? 'ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω' : '‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω';
  await ctx.reply(`‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á!\n${aiStatus}`);
});

// Stats command
bot.command('stats', async (ctx) => {
  try {
    const chatId = ctx.chat.id.toString();
    
    // Count tasks created from this chat
    const taskCount = await prisma.task.count({
      where: {
        telegramChatId: chatId,
        source: 'TELEGRAM'
      }
    });

    const recentTasks = await prisma.task.findMany({
      where: {
        telegramChatId: chatId,
        source: 'TELEGRAM'
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        title: true,
        status: true,
        priority: true,
        createdAt: true
      }
    });

    let statsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n`;
    statsMessage += `üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${taskCount}\n\n`;
    
    if (recentTasks.length > 0) {
      statsMessage += `üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n`;
      recentTasks.forEach((task: { priority: string; status: string; title: string }, index: number) => {
        const priorityEmoji = task.priority === 'HIGH' ? 'üî¥' : task.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
        const statusEmoji = task.status === 'DONE' ? '‚úÖ' : task.status === 'IN_PROGRESS' ? 'üîÑ' : 'üìã';
        statsMessage += `${index + 1}. ${statusEmoji} ${priorityEmoji} ${task.title}\n`;
      });
    }

    await ctx.reply(statsMessage);
  } catch (error) {
    console.error('Error getting stats:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// Handle forwarded messages
bot.on('message:forward_origin', async (ctx) => {
  try {
    const text = ctx.message.text || ctx.message.caption;
    if (!text) return;

    const chatId = ctx.chat.id;
    const messageId = ctx.message.message_id;
    
    // For now, use a mock user ID (in real app, you'd authenticate via Telegram WebApp)
    const userId = 'mock-user-id';
    
    // Parse hashtags
    const hashtags = parseHashtags(text);
    
    // Parse task data from forwarded message
    const taskData = await parseTaskFromMessage(text, hashtags);
    
    // Add context that this is a forwarded message
    taskData.description = `[–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n${taskData.description || text}`;
    
    // Create task
    const task = await createTaskFromTelegram(chatId, messageId, userId, taskData);
    
    // Send confirmation
    const confirmationMessage = `
üì® –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

üìã ${task.title}
üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority === 'HIGH' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : task.priority === 'MEDIUM' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}
${task.dueDate ? `üìÖ –°—Ä–æ–∫: ${task.dueDate.toLocaleDateString('ru-RU')}` : ''}
${task.project ? `üéØ –ü—Ä–æ–µ–∫—Ç: ${task.project.title}` : ''}
${task.project?.client ? `üë§ –ö–ª–∏–µ–Ω—Ç: ${task.project.client.name}` : ''}

ID –∑–∞–¥–∞—á–∏: ${task.id}
    `;
    
    await ctx.reply(confirmationMessage, {
      reply_to_message_id: messageId
    });
    
  } catch (error) {
    console.error('Error processing forwarded message:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// Handle all text messages
bot.on('message:text', async (ctx) => {
  try {
    const text = ctx.message.text;
    const chatId = ctx.chat.id;
    const messageId = ctx.message.message_id;
    
    // Skip if message is a command
    if (text.startsWith('/')) {
      return;
    }
    
    // Parse hashtags
    const hashtags = parseHashtags(text);
    
    // Process messages with hashtags or if AI is enabled
    const hasHashtags = hashtags.length > 0;
    const hasAI = !!process.env.OPENROUTER_API_KEY;
    
    if (!hasHashtags && !hasAI) {
      return;
    }
    
    // For now, use a mock user ID (in real app, you'd authenticate via Telegram WebApp)
    const userId = 'mock-user-id';
    
    // Parse task data from message
    const taskData = await parseTaskFromMessage(text, hashtags);
    
    // Skip if no meaningful task data extracted
    if (!taskData.title || taskData.title.length < 5) {
      return;
    }
    
    // Create task
    const task = await createTaskFromTelegram(chatId, messageId, userId, taskData);
    
    // Send confirmation
    const aiIndicator = hasAI ? 'ü§ñ ' : '';
    const confirmationMessage = `
${aiIndicator}‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!

üìã ${task.title}
üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority === 'HIGH' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : task.priority === 'MEDIUM' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}
${task.dueDate ? `üìÖ –°—Ä–æ–∫: ${task.dueDate.toLocaleDateString('ru-RU')}` : ''}
${task.project ? `üéØ –ü—Ä–æ–µ–∫—Ç: ${task.project.title}` : ''}
${task.project?.client ? `üë§ –ö–ª–∏–µ–Ω—Ç: ${task.project.client.name}` : ''}
${taskData.category ? `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${taskData.category}` : ''}
${taskData.estimatedHours ? `‚è±Ô∏è –û—Ü–µ–Ω–∫–∞: ${taskData.estimatedHours}—á` : ''}

ID –∑–∞–¥–∞—á–∏: ${task.id}
    `;
    
    await ctx.reply(confirmationMessage, {
      reply_to_message_id: messageId
    });
    
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// Error handler
bot.catch((err) => {
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e);
  } else {
    console.error('Unknown error:', e);
  }
});

// Export bot instance
export default bot;
