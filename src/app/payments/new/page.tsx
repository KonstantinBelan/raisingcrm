'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { ArrowLeft, Save, DollarSign } from 'lucide-react';
import Link from 'next/link';
import { Project } from '@/types';

const currencies = [
  { value: 'RUB', label: '‚ÇΩ –†—É–±–ª—å' },
  { value: 'USD', label: '$ –î–æ–ª–ª–∞—Ä' },
  { value: 'EUR', label: '‚Ç¨ –ï–≤—Ä–æ' },
];

export default function NewPaymentPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(false);
  const [projects, setProjects] = useState<Project[]>([]);
  const [formData, setFormData] = useState({
    amount: '',
    currency: 'RUB',
    description: '',
    dueDate: '',
    projectId: searchParams.get('projectId') || '',
  });

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const response = await fetch('/api/projects');
      if (response.ok) {
        const data = await response.json();
        setProjects(data.projects || []);
      }
    } catch (error) {
      console.error('Error fetching projects:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/payments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const data = await response.json();
        router.push(`/payments/${data.payment.id}`);
      } else {
        const error = await response.json();
        alert(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
      }
    } catch (error) {
      console.error('Error creating payment:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="container mx-auto p-6 max-w-2xl">
      <div className="flex items-center gap-4 mb-6">
        <Link href="/payments">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º
          </Button>
        </Link>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary/10 rounded-lg">
              <DollarSign className="w-6 h-6 text-primary" />
            </div>
            <div>
              <CardTitle>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</CardTitle>
              <CardDescription>
                –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="amount">–°—É–º–º–∞ *</Label>
                <Input
                  id="amount"
                  name="amount"
                  type="number"
                  step="0.01"
                  min="0"
                  value={formData.amount}
                  onChange={handleChange}
                  placeholder="0.00"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="currency">–í–∞–ª—é—Ç–∞ *</Label>
                <select
                  id="currency"
                  name="currency"
                  value={formData.currency}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-input bg-background rounded-md text-sm"
                  required
                >
                  {currencies.map((currency) => (
                    <option key={currency.value} value={currency.value}>
                      {currency.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞)"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="dueDate">–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</Label>
              <Input
                id="dueDate"
                name="dueDate"
                type="date"
                value={formData.dueDate}
                onChange={handleChange}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="projectId">–ü—Ä–æ–µ–∫—Ç</Label>
              <select
                id="projectId"
                name="projectId"
                value={formData.projectId}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-input bg-background rounded-md text-sm"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</option>
                {projects.map((project) => (
                  <option key={project.id} value={project.id}>
                    {project.title}
                  </option>
                ))}
              </select>
            </div>

            <div className="flex gap-4 pt-4">
              <Button type="submit" disabled={loading} className="flex-1">
                {loading ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                ) : (
                  <Save className="w-4 h-4 mr-2" />
                )}
                –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
              </Button>
              <Link href="/payments">
                <Button type="button" variant="outline">
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Tips */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="text-lg">üí° –°–æ–≤–µ—Ç—ã</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm text-muted-foreground">
          <p>‚Ä¢ –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è</p>
          <p>‚Ä¢ –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</p>
          <p>‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É</p>
          <p>‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π</p>
        </CardContent>
      </Card>
    </div>
  );
}
